<?php

namespace app\entities;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
/**
 * This is the model class for table "add_fields".
 *
 * @property int $id
 * @property string $key
 * @property string $value
 * @property string $create_at
 * @property string $update_at
 * @property int $program_id
 * @property int $author_id
 * @property int $last_redactor_id
 *
 * @property User $author
 * @property User $lastRedactor
 * @property Program $program
 */
class AddFields extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'add_fields';
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'createdAtAttribute' => 'create_at',
                'updatedAtAttribute' => 'update_at',
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public function beforeSave($insert)
    {
        if($insert)
            $this->author_id=Yii::$app->user->identity->id;
        else
           $this->last_redactor_id=Yii::$app->user->identity->id;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['create_at', 'update_at'], 'safe'],
            [['program_id', 'author_id', 'last_redactor_id'], 'integer'],
            [['key', 'value'], 'string', 'max' => 255],
            [['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['author_id' => 'id']],
            [['last_redactor_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['last_redactor_id' => 'id']],
            [['program_id'], 'exist', 'skipOnError' => true, 'targetClass' => Program::class, 'targetAttribute' => ['program_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'key' => 'Название',
            'value' => 'Значение',
            'create_at' => 'Дата создания',
            'update_at' => 'Последние редактирование',
            'program_id' => 'Програма',
            'author_id' => 'Автор',
            'last_redactor_id' => 'Последний редактор',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(User::class, ['id' => 'author_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLastRedactor()
    {
        return $this->hasOne(User::class, ['id' => 'last_redactor_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProgram()
    {
        return $this->hasOne(Program::class, ['id' => 'program_id']);
    }
}
